env:
  KIND_CLUSTER_NAME: test-helm
  KIND_CONFIG_PATH: ./linkis-dist/helm/scripts/resources/kind-cluster.yaml
  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard
    -Dmaven.wagon.http.retryHandler.count=3 -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
jobs:
  integration-test:
    env:
      HUB: ghcr.io/apache/linkis
      LINKIS_VERSION: 1.5.0
      SKIP_TEST: true
      TAG: ${{ github.sha }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Free up disk space
      run: '# https://github.com/actions/runner-images/issues/2840#issuecomment-790492173

        # du -sh /*        2> /dev/null | sort -rh  2> /dev/null | head

        # du -h -d2 /usr   2> /dev/null | sort -rh  2> /dev/null | head

        echo $JAVA_HOME

        echo "Check free disk space before cleanup."

        df -h

        echo "Removing non-essential tools and libraries."

        sudo rm -rf "$AGENT_TOOLSDIRECTORY"

        sudo rm -rf /opt/ghc

        sudo rm -rf /usr/share/dotnet

        sudo rm -rf /usr/local/share/boost

        # delete libraries for Android (12G), PowerShell (1.3G), Swift (1.7G)

        sudo rm -rf /usr/local/lib/android

        sudo rm -rf /usr/local/share/powershell

        sudo rm -rf /usr/share/swift

        echo "Check free disk space after cleanup."

        df -h

        echo $JAVA_HOME

        '
    - continue-on-error: true
      name: Prune docker images
      run: 'echo "Pruning docker images on GH action runner node"

        docker image prune -a -f

        docker system df

        df -h

        '
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    - continue-on-error: true
      name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        distribution: adopt
        java-version: 8
    - continue-on-error: true
      name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        path: ~/.m2/repository
        restore-keys: '${{ runner.os }}-maven-

          '
    - continue-on-error: true
      name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - continue-on-error: true
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - continue-on-error: true
      name: Build frontend by node.js
      run: 'cd linkis-web

        sed -i "/VUE_APP_MN_CONFIG_PREFIX/d" .env

        npm install

        npm run build

        '
    - continue-on-error: true
      name: Build backend by maven
      run: './mvnw install -Pdocker -Dmysql.connector.scope=compile -Dmaven.javadoc.skip=true
        -Dmaven.test.skip=true -Dlinkis.build.web=true -Dlinkis.build.ldh=true

        '
    - continue-on-error: true
      name: Set up chart-testing
      uses: ./.github/actions/chart-testing-action
    - continue-on-error: true
      name: Create Kind cluster
      uses: ./.github/actions/kind-action
      with:
        cluster_name: ${{ env.KIND_CLUSTER_NAME }}
        config: ${{ env.KIND_CONFIG_PATH }}
        node_image: ${{ matrix.kubernetes-version }}
    - continue-on-error: true
      name: Start Linkis Service
      run: "docker tag linkis:${{ env.LINKIS_VERSION }}     linkis:dev\ndocker tag\
        \ linkis-web:${{ env.LINKIS_VERSION }} linkis-web:dev\ndocker tag linkis-ldh:${{\
        \ env.LINKIS_VERSION }} linkis-ldh:dev\n\n# for debug Download the image directly\
        \ first, then adjust it to active build\n#ROOT_DIR=./linkis-dist/\n#MIRRORS=\"\
        ghcr.io\"\n#TAG=\"dev\"\n#docker pull ${MIRRORS}/apache/linkis/linkis-ldh:${TAG}\n\
        #docker pull ${MIRRORS}/apache/linkis/linkis:${TAG}\n#docker pull ${MIRRORS}/apache/linkis/linkis-web:${TAG}\n\
        #docker tag  ${MIRRORS}/apache/linkis/linkis:${TAG} linkis:dev\n#docker tag\
        \  ${MIRRORS}/apache/linkis/linkis-web:${TAG} linkis-web:dev\n#docker tag\
        \  ${MIRRORS}/apache/linkis/linkis-ldh:${TAG} linkis-ldh:dev\n\n\n#show image\
        \ list\ndocker image ls\nbash ./linkis-dist/helm/scripts/install-mysql.sh\
        \  false\\\n    && bash ./linkis-dist/helm/scripts/install-ldh.sh true \\\n\
        \    && bash ./linkis-dist/helm/scripts/install-charts-with-ldh.sh linkis\
        \ linkis-demo true\nn=0\nsleep 60\nwhile (($n<10))\ndo\n  kubectl get pods\
        \ -A\n  n=$((n+1))\n  sleep 20\ndone\n\n#show linkis pod logs\n#POD_NAME=`kubectl\
        \ get pods -n linkis -l app.kubernetes.io/instance=linkis-demo-cg-linkismanager\
        \ -o jsonpath='{.items[0].metadata.name}'`\n#kubectl logs -n linkis  ${POD_NAME}\
        \ -f --tail=10000\n#POD_NAME=`kubectl get pods -n linkis -l app.kubernetes.io/instance=linkis-demo-cg-engineconnmanager\
        \ -o jsonpath='{.items[0].metadata.name}'`\n#kubectl logs -n linkis  ${POD_NAME}\
        \ -f --tail=10000\n"
      shell: bash
    - continue-on-error: true
      name: Linkis-Cli Test
      run: '# Enable port-forward

        bash ./linkis-dist/helm/scripts/remote-proxy.sh start

        # Show port-forward list

        bash ./linkis-dist/helm/scripts/remote-proxy.sh list

        # Check if the web service is available

        curl http://127.0.0.1:8088/indexhtml


        # Execute test by linkis-cli

        POD_NAME=`kubectl get pods -n linkis -l app.kubernetes.io/instance=linkis-demo-mg-gateway
        -o jsonpath=''{.items[0].metadata.name}''`

        kubectl exec -it -n linkis  ${POD_NAME} -- bash -c " \

        sh /opt/linkis/bin/linkis-cli -engineType shell-1 -codeType shell -code \"pwd\"
        ";


        kubectl exec -it -n linkis  ${POD_NAME} -- bash -c " \

        sh /opt/linkis/bin/linkis-cli -engineType python-python2 -codeType python
        -code   ''print(\"hello\")'' "


        #todo

        #kubectl exec -it -n linkis  ${POD_NAME} -- bash -c " \

        #sh /opt/linkis/bin/linkis-cli -engineType hive-3.1.3 -codeType hql -code   ''show
        databases'' "


        #kubectl exec -it -n linkis  ${POD_NAME} -- bash -c " \

        #sh /opt/linkis/bin/linkis-cli -engineType spark-3.2.1 -codeType sql -code   ''show
        databases'' "

        '
      shell: bash
    strategy:
      matrix:
        kubernetes-version:
        - kindest/node:v1.23.4
        node-version:
        - 16.0.0
    timeout-minutes: 90
name: Integration Test
on:
  repository_dispatch:
    types: trigger-ga___integration-test.yml
